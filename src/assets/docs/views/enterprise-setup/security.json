{
  "title": "Security",
  "id": "security",
  "section": "3.3. Setting up an Enterprise",
  "intro": "Member data access follows a principle of ‘deny first, authorize explicitly’. That means that once Members are assigned to Groups, Security Roles are used to explicitly authorize them to access Resources that are accessible given the Groups and Resources structure. This FieldLogs set of features allows for fine grained control over security privileges while help manage these over large Member population.",
  "blocks": [
    {
      "type": "h1",
      "content": "3.3.4. Security"
    },
    {
      "type": "text",
      "content":"FieldLogs Enterprise's Security Manager lets Administrators create and edit Roles that are necessary within the Enterprise. Members are assigned one of more Roles within the Enterprise which dictate their access to various Resources of the FieldLogs platform. Roles are in effect rules that contain specific conditional logic, giving a very fine grain control access over types of Resources such as  Templates, Jobs and more. By default every Enterprise comes with a set of Roles already configured to help get started. Administrators may wish to edit these default Roles by renaming or adding custom Rules, or even adding new Roles that suit better the Enterprise business."
    },
    {
      "type": "h2",
      "content": "3.3.4.1 Roles & the Hierarchy"
    },
    {
      "type": "text",
      "content":"It's important to understand how a Role is constructed and what it means to assign a Role to a Member in your Enterprise. Roles consist of security Rules that explicitly tells FieldLogs what kind of access rights a Role has to certain Resource objects.<br><br/> This differs from the Hierarchy structure in that it allows the ability to define access to functionality and data for Members inside a specific group and over the data scope context of the related Groups."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-2.png",
      "imgAlt":"Image Alt",
      "caption": "As an example, let's take another look at our Hierarchy structure. In the subgroup 'OGSubBU1' you will see one 'Manager' Member and two 'Employee' Members. Structure-wise the Hierarchy shows a 'Manager' with two users the same group scope level. <br/><br/>But using Roles we are able to specify a specific Role, and hence fine grained Rule, for Members of a Group that dictates their access rights to Resources."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-0.png",
      "imgAlt":"Image Alt",
      "caption": "The Roles of a Member can be added/updated through the Member Management panel in the middle of the Enterprise screen. These can be assigned in bulk if necessary. Here you can see in more detail that actually we have a distinction between two Members that originally appeared to have the same Role in the Enterprise Hierarchy. OGUser3 is a Template 'Author' and OGUser4 is an 'SME Reviewer'."
    },
    {
      "type": "h2",
      "content": "3.3.4.2 Configuring Roles with Rules"
    },
    {
      "type": "text",
      "content":"Configuring Roles can be achieved by navigating to the 'Security' sub-tab when you are on the Enterprise section of the FieldLogs website. Here, the Security Manager provides a simple UI for defining & editing Roles with fine grain Rules. Let's take a look below in the context of our Enterprise:"
    },
    {
      "type": "info",
      "content": "Click on the 'Add new Rule' button to add new Rules to a Role."
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-1.png",
      "imgAlt":"Image Alt"
    },
    {
      "type": "text",
      "content":"When viewing the Rules for a Role, it will becomes clear that there can be real differences between Roles. The Hierarchy showed these users at the same level in the Group but Members can have Roles to define their function within a specific Group."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-0-1.png",
      "imgAlt":"Image Alt",
      "caption": "Here the Author Role only has access to data-themed 'Securable Objects' (these are the Resources previously mentioned), with the ability to create Templates and Jobs, yet no access to administration functions of the Enterprise."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-0-2.png",
      "imgAlt":"Image Alt",
      "caption": "The 'Product Manager' Role however has addition Rules that allow for a certain amount of administration and viewing of Enterprise Resources that are relevant to his job."
    },
    {
      "type": "h2",
      "content": "3.3.4.3 Types of Securable Objects"
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-2.png",
      "imgAlt":"Image Alt",
      "caption": "A 'Securable Object' needs to be selected for a Rule. Templates is the default selection."
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"<b>Templates</b> & <b>Jobs</b> are the core content (Resources) that FieldLogs users create."
        },
        {
          "text":"<b>User</b> means a Members of FieldLogs Enterprises."
        },
        {
          "text":"<b>Enterprise</b> is anything do with the Enterprise Hierarchy structure."
        },
        {
          "text":"<b>Tasks</b> are generated notifications of Job assignments & Job Lifecycle stages."
        },
        {
          "text":"<b>Roles</b> mean security roles."
        },
        {
          "text":"<b>Lifecycles</b> facilitate collaborative Template edition Lifecycles."
        },
        {
          "text":"<b>Security Exceptions</b> define specific access for a user to a securable object where otherwise it would be denied. "
        },
        {
          "text":"<b>Everything</b> refers to everything above."
        }
      ]
    },
    {
      "type": "h2",
      "content": "3.3.4.4 Types of Access Rights"
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-3.png",
      "imgAlt":"Image Alt",
      "caption": "Read is the default access right for newly created Rules. Click the dropdown to view Rules for a selected 'Securable Object'."
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"<b>Read</b> refers to the ability have read access to an object, hence accessing its information."
        },
        {
          "text":"<b>Write</b> refers to the ability have write access to a Resource."
        },
        {
          "text":"<b>Translate</b> is the ability to translate Templates (therefore only available for Templates)."
        },
        {
          "text":"<b>Assign</b> is the ability to assign a Template or Job to other Members."
        },
        {
          "text":"<b>Acquire data</b> is the ability to acquire data related to a Job or Template."
        },
        {
          "text":"<b>Edit info</b> refers to the ability to edit meta data relating to Jobs or Templates."
        },
        {
          "text":"<b>Export</b> is the right to export Job data."
        },
        {
          "text":"<b>Edit Logs</b> refers specifically to the right to edit Logs attached to a Job."
        },
        {
          "text":"<b>All</b> applies all the available access rights to the selected Resource."
        }
      ]
    },
    {
      "type": "h2",
      "content": "3.3.4.5 Effects of Roles and Rules on the user interface"
    },
    {
      "type": "text",
      "content": "Fieldlogs dynamically changes its runtime user interface (UI) depending on the level of access associated with the user. For example, if 'OGContractor1' is assigned the 'Author' Role then access will be granted to write Templates, but access will be denied to delete Templates not belonging to 'OGContractor1'. This is reflected in the UI where the delete button will be removed from all runtime UI elements associated with the Template being accessed."
    },
    {
      "type": "h2",
      "content": "3.3.4.6 Examples"
    },
    {
      "type": "text",
      "content":"Let's go ahead and look at some examples of some key Roles, their Rule combinations, and delve into what they mean."
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-5-1.png",
      "imgAlt":"Image Alt"
    },
    {
      "type":"text",
      "content": "The 'Manager' Role (above) is a typical administration role that can be used to allows the administration of a Group's Members, Templates & Lifecycles within the Enterprise Group structure. The Rule combinations here allow:"
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"Full administration rights (create, delete, assign, etc) of Templates at the 'Manager' users scope in the Hierarchy."
        },
        {
          "text":"Read rights to the Enterprise structure. This would give this Role access to the Enterprise tab to view the Group filtered view of the Enterprise Hierarchy, i.e., only the Group where the user belongs and below."
        },
        {
          "text":"Full administration rights to manage users within the 'Managers' scoped Enterprise structure, i.e., the relevant Groups as in the point above."
        },
        {
          "text":"Full administration rights to manage Lifecycles within the Manager's scoped Enterprise structure."
        }
      ]
    },
    {
      "type":"info",
      "content":"Note that to be fully operational a 'Manager' needs to be a FieldLogs Member with both “Manager” and “Employee” Roles. One augments the other. This approach is considered best practice as it allows scaling Roles by building a simple hierarchy of Roles."
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-5-2.png",
      "imgAlt":"Image Alt"
    },
    {
      "type":"text",
      "content": "The Employee Role example above is a standard Rule collection used to provide the necessary rights for a member of an Enterprise to be able to use Enterprise Templates. The Rule combinations here specifically allow:"
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"Right to view, run and assign Enterprise Templates."
        },
        {
          "text":"Full rights to administer Jobs such as creating, deleting, editing, exporting and assigning the continuation of Jobs."
        },
        {
          "text":"The full ability to view, run and re-assign Tasks including creating Security Exceptions if needed when assigning Tasks to other Members within the 'Employee's' Enterprise scope."
        }
      ]
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-5-3.png",
      "imgAlt":"Image Alt"
    },
    {
      "type":"text",
      "content": "A 'Contractor' Role is specifically aimed at temporary or restricted Members of an Enterprise that only need access to data within a narrow scope in the Enterprise – we recommend typically that a Group be created per Contractor  company you may use. With similar rights as an 'Employee' Role, this Role can be considered more as a label. The Rule combinations here specifically allow:"
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"Right to view, run and assign Enterprise Templates."
        },
        {
          "text":"Full rights to administer Jobs such as creating, deleting, editing, exporting and assigning the continuation of Jobs."
        },
        {
          "text":"The full ability to view, run and re-assign Tasks including creating Security Exceptions if needed when assigning Tasks to other Members within the 'Contractor's' Enterprise scope."
        }
      ]
    },
    {
      "type": "h1",
      "content": "3.3.4.7 Security Exceptions",
      "id": "exceptions"
    },
    {
      "type": "text",
      "content":"In some situations an Administrator or privileged user may find it necessary to allow a user access to a particular Resource not located within the users In-scope Hierarchy. As this overrides the intended behavior of the Enterprise authorization, a Security Exception needs to be created informing the system that access is requested in this particular case."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-5-0.png",
      "imgAlt":"Image Alt",
      "caption": "Consider a situation where 'OGUser7' would like to assign a Task to 'OGContractor1'. As 'OGContractor1' is located in a different branch of the Enterprise Hierarchy structure, access will be denied to the Resource associated with the assign Task. The only way to override this constraint is to create a Security Exception for 'OGContractor1' to the Resource."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-5-4.png",
      "imgAlt":"Image Alt",
      "caption": "To create a Security Exception, we first need to navigate to the cell of the item. On the right, there is a dropdown list of actions, one of which is the Assign action. When the assign button is selected, the assign Task popup will appear. Here, we can select or enter the user we want to assign the Resource to. In 'OGUser7’s' case, 'OGContractor1' will be selected. This will prompt the creation of a Security Exception for 'OGContractor1'."
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-5.png",
      "imgAlt":"Image Alt",
      "caption": "For security reasons, Fieldlogs does now allow for the direct creation of Security Exceptions. Instead, Fieldlogs will present the option to create a Security Exception in the case where the system knows that the assignee of the Task will not have access to the Resource."
    },
    {
      "type": "text",
      "content": "An assignee will also have the ability to request access to the Resource from the assignor. This can achieved by clicking on the fix button in the Task inbox section."
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-8.png",
      "imgAlt":"Image Alt"
    },
    {
      "type": "image",
      "img":"assets/images/doco-images/img_2-3-4-6.png",
      "imgAlt":"Image Alt",
      "caption": "This will notify the assignor that the assignee does not have access. Upon confirmation, the Task in error in the assignors Inbox will change to inform the assignor that access has been requested and he/she can then proceed to create a Security Exception as shown above."
    },
    {
      "type": "warn",
      "content": "A Template or Job Resource much be in a shared or public state, otherwise access will continue to be denied even with the Security Exception."
    },
    {
      "type": "h2",
      "content": "3.3.4.7.1 Security Exceptions Manager"
    },
    {
      "type": "text",
      "content":"At any time, created Security Exceptions can be managed via the Security Exceptions Manager subsection under the Enterprise section. Here we can see the list of Security Exceptions created throughout the Enterprise. Privileged users located higher in the Hierarchy will have access to view Security Exceptions created by users located at or lower down in the Hierarchy. In the manager we can see, and modify a few of, the following attributes associated with Security Exception:"
    },
    {
      "type": "bullet",
      "points": [
        {
          "text":"The type of Security Exception created."
        },
        {
          "text":"The creator (grantor) of the Exception."
        },
        {
          "text":"The grantee (granted to) of the Exception."
        },
        {
          "text":"The start and end date during which the Exception will grant access."
        },
        {
          "text":"The Resource (item) being accessed."
        },
        {
          "text":"Whether or not the Exception is currently enabled."
        }
      ]
    },
    {
      "type": "img",
      "img":"assets/images/doco-images/img_2-3-4-7.png",
      "imgAlt":"Image Alt"
    }
  ]
}
